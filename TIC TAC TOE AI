import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_win(board, player):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def available_moves(board):
    return [(row, col) for row in range(3) for col in range(3) if board[row][col] == " "]

def player_move(board):
    while True:
        try:
            row = int(input("Enter row (1-3): ")) - 1
            col = int(input("Enter column (1-3): ")) - 1
            if board[row][col] == " ":
                return row, col
            else:
                print("That cell is already taken.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter a number between 1 and 3.")

def ai_move(board, player):
    # Simple AI: chooses a random available cell
    return random.choice(available_moves(board))

def main():
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    random.shuffle(players)
    print("You are player", players[0])
    print_board(board)

    turn = 0
    while True:
        current_player = players[turn % 2]
        if current_player == "X":
            row, col = player_move(board)
        else:
            row, col = ai_move(board, current_player)
        board[row][col] = current_player
        print_board(board)
        if check_win(board, current_player):
            print(current_player, "wins!")
            break
        if all(board[i][j] != " " for i in range(3) for j in range(3)):
            print("It's a tie!")
            break
        turn += 1

if __name__ == "__main__":
    main()
